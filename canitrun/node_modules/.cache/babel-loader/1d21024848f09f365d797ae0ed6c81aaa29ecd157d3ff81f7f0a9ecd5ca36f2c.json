{"ast":null,"code":"var _jsxFileName = \"/Users/nam-yongho/Desktop/Projects/Web Developing Projects/Can It Run/can_it_run/canitrun/src/front_page.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport loadingAnimation from './loading.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FrontPage({\n  user_cpu,\n  user_gpu,\n  user_ram,\n  game_name,\n  onChange,\n  setGameId\n}) {\n  _s();\n  const history = useHistory();\n  const [isGameValid, setIsGameValid] = useState(false);\n  const [isCpuValid, setIsCpuValid] = useState(false);\n  const [isGpuValid, setIsGpuValid] = useState(false);\n  const [isLoadingGame, setIsLoadingGame] = useState(false);\n  const [isLoadingCPU, setIsLoadingCPU] = useState(false);\n  const [isLoadingGPU, setIsLoadingGPU] = useState(false);\n  const [finishedTypingGame, setFinishedTypingGame] = useState(false);\n  const [finishedTypingCPU, setFinishedTypingCPU] = useState(false);\n  const [finishedTypingGPU, setFinishedTypingGPU] = useState(false);\n  const [gameSuggestions, setGameSuggestions] = useState([]);\n  const [cpuSuggestions, setCpuSuggestions] = useState([]);\n  const [gpuSuggestions, setGpuSuggestions] = useState([]);\n  const [gameFocused, setGameFocused] = useState(false);\n  const [cpuFocused, setCpuFocused] = useState(false);\n  const [gpuFocused, setGpuFocused] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!isCpuValid || !user_cpu) {\n      alert(\"CPU is not set. Cannot proceed.\");\n    } else if (!isGpuValid || !user_gpu) {\n      alert(\"GPU ID is not set. Cannot proceed.\");\n    } else if (!isGameValid || !game_name) {\n      alert(\"Game Name is not set. Cannot proceed.\");\n    } else if (!user_ram) {\n      alert(\"RAM is not set. Cannot proceed.\");\n    } else {\n      history.push(\"/result\", {\n        game_name: props.game_name,\n        user_cpu: props.user_cpu,\n        user_gpu: props.user_gpu,\n        user_ram: props.user_ram\n      });\n    }\n  };\n  const fetchSuggestions = async (input, type) => {\n    try {\n      const response = await fetch(`http://localhost:3001/api/suggestions?input=${input}&type=${type}`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        console.log(response);\n        if (type === 'CPU') {\n          setCpuSuggestions(data);\n        } else if (type === 'GPU') {\n          setGpuSuggestions(data);\n        } else if (type === 'Game') {\n          setGameSuggestions(data);\n        }\n      } else {\n        console.error('inside if Failed to fetch suggestions:', response.status);\n      }\n    } catch (error) {\n      console.error('Failed to fetch suggestions:', error);\n    } finally {\n      if (type === 'Game') {\n        setIsLoadingGame(false); // Set loading state to false when done\n      }\n\n      if (type === 'CPU') {\n        setIsLoadingCPU(false); // Set loading state to false when done\n      }\n\n      if (type === 'GPU') {\n        setIsLoadingGPU(false); // Set loading state to false when done\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!finishedTypingGame) {\n      if (game_name) {\n        setGameSuggestions([]);\n        setIsLoadingGame(true); // Set loading state to true for game_name\n        const timer = setTimeout(() => {\n          fetchSuggestions(game_name.toUpperCase(), 'Game');\n        }, 600);\n        return () => {\n          clearTimeout(timer);\n        };\n      } else {\n        setGameSuggestions([]);\n      }\n    } else {\n      setFinishedTypingGame(false);\n    }\n  }, [game_name]);\n  useEffect(() => {\n    if (!finishedTypingCPU) {\n      if (user_cpu) {\n        setCpuSuggestions([]);\n        setIsLoadingCPU(true); // Set loading state to true for game_name\n        const timer = setTimeout(() => {\n          fetchSuggestions(user_cpu, 'CPU');\n        }, 600);\n        return () => {\n          clearTimeout(timer);\n        };\n      } else {\n        setCpuSuggestions([]);\n      }\n    } else {\n      setFinishedTypingCPU(false);\n    }\n  }, [user_cpu]);\n  useEffect(() => {\n    if (!finishedTypingGPU) {\n      if (user_cpu) {\n        setGpuSuggestions([]);\n        setIsLoadingGPU(true); // Set loading state to true for game_name\n        const timer = setTimeout(() => {\n          fetchSuggestions(user_gpu, 'GPU');\n        }, 600);\n        return () => {\n          clearTimeout(timer);\n        };\n      } else {\n        setGpuSuggestions([]);\n      }\n    } else {\n      setFinishedTypingGPU(false);\n    }\n  }, [user_gpu]);\n  const onGameBlurDelay = () => {\n    setTimeout(() => {\n      setGameFocused(false);\n    }, 200); // 200 milliseconds delay\n  };\n\n  const onCpuBlurDelay = () => {\n    setTimeout(() => {\n      setCpuFocused(false);\n    }, 200); // 200 milliseconds delay\n  };\n\n  const onGpuBlurDelay = () => {\n    setTimeout(() => {\n      setGpuFocused(false);\n    }, 200); // 200 milliseconds delay\n  };\n\n  // Function to check if input matches any of the suggestions\n  const checkInputValidity = (input, suggestions, type) => {\n    const matchingSuggestion = suggestions.find(suggestion => suggestion.Model.toLowerCase() === input.toLowerCase());\n    const isValid = Boolean(matchingSuggestion);\n    if (type === \"CPU\") {\n      setIsCpuValid(isValid);\n    } else if (type === \"GPU\") {\n      setIsGpuValid(isValid);\n    } else if (type === \"Game\") {\n      setIsGameValid(isValid);\n    }\n  };\n  useEffect(() => {\n    if (game_name && gameSuggestions.length > 0) {\n      checkInputValidity(game_name, gameSuggestions, \"Game\");\n    }\n  }, [game_name, gameSuggestions]);\n  useEffect(() => {\n    if (user_cpu && cpuSuggestions.length > 0) {\n      checkInputValidity(user_cpu, cpuSuggestions, \"CPU\");\n    }\n  }, [user_cpu, cpuSuggestions]);\n  useEffect(() => {\n    if (user_gpu && gpuSuggestions.length > 0) {\n      checkInputValidity(user_gpu, gpuSuggestions, \"GPU\");\n    }\n  }, [user_gpu, gpuSuggestions]);\n  let id = \"inputs\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"game_name\",\n        children: \"Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"game_name\",\n        name: \"game_name\",\n        placeholder: \"Enter Name of the Game here\",\n        value: game_name,\n        onChange: onChange,\n        onFocus: () => setGameFocused(true),\n        onBlur: onGameBlurDelay,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this), isLoadingGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingAnimation,\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: gameFocused && gameSuggestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions\",\n          children: gameSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            onClick: () => {\n              setFinishedTypingGame(true);\n              onChange({\n                target: {\n                  name: 'game_name',\n                  value: suggestion.Model\n                }\n              });\n            },\n            children: suggestion.Model\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 17\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user_cpu\",\n        children: \"User CPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_cpu\",\n        name: \"user_cpu\",\n        placeholder: \"Enter your CPU here\",\n        value: user_cpu,\n        onChange: onChange,\n        onFocus: () => setCpuFocused(true),\n        onBlur: onCpuBlurDelay,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this), isLoadingCPU ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingAnimation,\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: cpuFocused && cpuSuggestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions\",\n          children: cpuSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            onClick: () => {\n              console.log(\"Clicked on:\", suggestion.Model);\n              onChange({\n                target: {\n                  name: 'user_cpu',\n                  value: suggestion.Model\n                }\n              });\n            },\n            children: suggestion.Model\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user_gpu\",\n        children: \"User GPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_gpu\",\n        name: \"user_gpu\",\n        placeholder: \"Enter your GPU here\",\n        value: user_gpu,\n        onChange: onChange,\n        onFocus: () => setGpuFocused(true),\n        onBlur: onGpuBlurDelay,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this), isLoadingGPU ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingAnimation,\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: gpuFocused && gpuSuggestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions\",\n          children: gpuSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            onClick: () => {\n              onChange({\n                target: {\n                  name: 'user_gpu',\n                  value: suggestion.Model\n                }\n              });\n            },\n            children: suggestion.Model\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user_ram\",\n        children: \"User RAM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_ram\",\n        name: \"user_ram\",\n        placeholder: \"Enter your RAM here\",\n        value: user_ram,\n        onChange: onChange,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isGameValid ? \"Game input is valid\" : \"Game input is not valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isCpuValid ? \"CPU input is valid\" : \"CPU input is not valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isGpuValid ? \"GPU input is valid\" : \"GPU input is not valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n}\n_s(FrontPage, \"D6VBioQPx/TwkeflmihDvxrnyrY=\", false, function () {\n  return [useHistory];\n});\n_c = FrontPage;\nexport default FrontPage;\nvar _c;\n$RefreshReg$(_c, \"FrontPage\");","map":{"version":3,"names":["React","useEffect","useState","useHistory","loadingAnimation","jsxDEV","_jsxDEV","FrontPage","user_cpu","user_gpu","user_ram","game_name","onChange","setGameId","_s","history","isGameValid","setIsGameValid","isCpuValid","setIsCpuValid","isGpuValid","setIsGpuValid","isLoadingGame","setIsLoadingGame","isLoadingCPU","setIsLoadingCPU","isLoadingGPU","setIsLoadingGPU","finishedTypingGame","setFinishedTypingGame","finishedTypingCPU","setFinishedTypingCPU","finishedTypingGPU","setFinishedTypingGPU","gameSuggestions","setGameSuggestions","cpuSuggestions","setCpuSuggestions","gpuSuggestions","setGpuSuggestions","gameFocused","setGameFocused","cpuFocused","setCpuFocused","gpuFocused","setGpuFocused","handleSubmit","e","preventDefault","alert","push","props","fetchSuggestions","input","type","response","fetch","ok","data","json","console","log","error","status","timer","setTimeout","toUpperCase","clearTimeout","onGameBlurDelay","onCpuBlurDelay","onGpuBlurDelay","checkInputValidity","suggestions","matchingSuggestion","find","suggestion","Model","toLowerCase","isValid","Boolean","length","id","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","name","placeholder","value","onFocus","onBlur","autoComplete","className","src","alt","map","index","onClick","target","_c","$RefreshReg$"],"sources":["/Users/nam-yongho/Desktop/Projects/Web Developing Projects/Can It Run/can_it_run/canitrun/src/front_page.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport loadingAnimation from './loading.svg';\nfunction FrontPage({user_cpu, user_gpu, user_ram, game_name, onChange, setGameId}) {\n    const history = useHistory();\n\n\n    const [isGameValid, setIsGameValid] = useState(false);\n    const [isCpuValid, setIsCpuValid] = useState(false);\n    const [isGpuValid, setIsGpuValid] = useState(false);\n\n    const [isLoadingGame, setIsLoadingGame] = useState(false);\n    const [isLoadingCPU, setIsLoadingCPU] = useState(false);\n    const [isLoadingGPU, setIsLoadingGPU] = useState(false);\n\n    const [finishedTypingGame, setFinishedTypingGame] = useState(false);\n    const [finishedTypingCPU, setFinishedTypingCPU] = useState(false);\n    const [finishedTypingGPU, setFinishedTypingGPU] = useState(false);\n\n    const [gameSuggestions, setGameSuggestions] = useState([]);\n    const [cpuSuggestions, setCpuSuggestions] = useState([]);\n    const [gpuSuggestions, setGpuSuggestions] = useState([]);\n\n    const [gameFocused, setGameFocused] = useState(false);\n    const [cpuFocused, setCpuFocused] = useState(false);\n    const [gpuFocused, setGpuFocused] = useState(false);\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      if(!isCpuValid || !user_cpu){\n        alert(\"CPU is not set. Cannot proceed.\");\n      }else if(!isGpuValid || !user_gpu){\n        alert(\"GPU ID is not set. Cannot proceed.\");\n      }else if(!isGameValid || !game_name){\n        alert(\"Game Name is not set. Cannot proceed.\");\n      }else if(!user_ram){\n        alert(\"RAM is not set. Cannot proceed.\");\n      }\n      else{\n        history.push(\"/result\", { \n          game_name: props.game_name,\n          user_cpu: props.user_cpu,\n          user_gpu: props.user_gpu,\n          user_ram: props.user_ram,\n        });\n      }\n\n    };\n\n    const fetchSuggestions = async (input, type) => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/suggestions?input=${input}&type=${type}`);\n        if (response.ok) {\n            const data = await response.json();\n            console.log(data);\n            console.log(response);\n            if (type === 'CPU') {\n            setCpuSuggestions(data);\n            } else if (type === 'GPU') {\n            setGpuSuggestions(data);\n            } else if (type === 'Game') {\n            setGameSuggestions(data);\n            }\n        } else {\n            console.error('inside if Failed to fetch suggestions:', response.status);\n        }\n      } catch (error) {\n      console.error('Failed to fetch suggestions:', error);\n      } finally {\n        if (type === 'Game'){\n          setIsLoadingGame(false);  // Set loading state to false when done\n        }\n        if (type === 'CPU'){\n          setIsLoadingCPU(false);  // Set loading state to false when done\n        }\n        if (type === 'GPU'){\n          setIsLoadingGPU(false);  // Set loading state to false when done\n        }\n      }\n    };\n\n    useEffect(() => {\n      if (!finishedTypingGame){\n        if (game_name) {\n          setGameSuggestions([])\n          setIsLoadingGame(true);  // Set loading state to true for game_name\n          const timer = setTimeout(() => {\n            fetchSuggestions(game_name.toUpperCase(), 'Game');\n          }, 600); \n          return () => {\n            clearTimeout(timer);\n          };\n        }else{\n          setGameSuggestions([])\n        }\n      }else{\n        setFinishedTypingGame(false);\n      }\n    }, [game_name]);\n\n    useEffect(() => {\n      if (!finishedTypingCPU){\n        if (user_cpu) {\n          setCpuSuggestions([])\n          setIsLoadingCPU(true);  // Set loading state to true for game_name\n          const timer = setTimeout(() => {\n            fetchSuggestions(user_cpu, 'CPU');\n          }, 600); \n          return () => {\n            clearTimeout(timer);\n          };\n        }else{\n          setCpuSuggestions([])\n        }\n      }else{\n        setFinishedTypingCPU(false);\n      }\n    }, [user_cpu]);\n\n    useEffect(() => {\n      if (!finishedTypingGPU){\n        if (user_cpu) {\n          setGpuSuggestions([])\n          setIsLoadingGPU(true);  // Set loading state to true for game_name\n          const timer = setTimeout(() => {\n            fetchSuggestions(user_gpu, 'GPU');\n          }, 600); \n          return () => {\n            clearTimeout(timer);\n          };\n        }else{\n          setGpuSuggestions([])\n        }\n      }else{\n        setFinishedTypingGPU(false);\n      }\n    }, [user_gpu]);\n\n    const onGameBlurDelay = () => {\n        setTimeout(() => {\n          setGameFocused(false);\n        }, 200); // 200 milliseconds delay\n      };\n\n    const onCpuBlurDelay = () => {\n        setTimeout(() => {\n          setCpuFocused(false);\n        }, 200); // 200 milliseconds delay\n      };\n     \n    const onGpuBlurDelay = () => {\n        setTimeout(() => {\n            setGpuFocused(false);\n        }, 200); // 200 milliseconds delay\n    };\n\n    // Function to check if input matches any of the suggestions\n    const checkInputValidity = (input, suggestions, type) => {\n      const matchingSuggestion = suggestions.find(\n          (suggestion) => suggestion.Model.toLowerCase() === input.toLowerCase()\n      );\n      const isValid = Boolean(matchingSuggestion);\n      if (type === \"CPU\") {\n          setIsCpuValid(isValid);\n      } else if (type === \"GPU\") {\n          setIsGpuValid(isValid);\n      } else if (type === \"Game\") {\n          setIsGameValid(isValid);\n      }\n  };\n  \n    useEffect(() => {\n        if (game_name && gameSuggestions.length > 0) {\n          checkInputValidity(game_name, gameSuggestions, \"Game\");\n        }\n      }, [game_name, gameSuggestions]);\n\n    useEffect(() => {\n      if (user_cpu && cpuSuggestions.length > 0) {\n        checkInputValidity(user_cpu, cpuSuggestions, \"CPU\");\n      }\n    }, [user_cpu, cpuSuggestions]);\n  \n    useEffect(() => {\n      if (user_gpu && gpuSuggestions.length > 0) {\n        checkInputValidity(user_gpu, gpuSuggestions, \"GPU\");\n      }\n    }, [user_gpu, gpuSuggestions]);\n\n  let id = \"inputs\";\n  return (\n        <div id={id}>\n            <form onSubmit={handleSubmit}>\n            <label htmlFor='game_name'>Game</label><br/>\n            <input\n                type='text'\n                id='game_name'\n                name='game_name'\n                placeholder='Enter Name of the Game here'\n                value={game_name}\n                onChange= {onChange}\n                onFocus={() => setGameFocused(true)}\n                onBlur={onGameBlurDelay}\n                autoComplete=\"off\"\n            />\n            {isLoadingGame ? (\n            <div className=\"loading\">\n                <img src={loadingAnimation} alt=\"Loading...\" />\n            </div>\n            ) : null }\n            <div>\n            {gameFocused && gameSuggestions.length > 0 ? (\n                <div className=\"suggestions\">\n                {gameSuggestions.map((suggestion, index) => (\n                    <div \n                    className=\"suggestion-item\"\n                    key={index} \n                    onClick={() => {\n                        setFinishedTypingGame(true);\n                        onChange({ target: { name: 'game_name', value: suggestion.Model } });           \n                    }}\n                    >\n                    {suggestion.Model}\n                    </div>\n                ))}\n                </div>\n            ) : null}\n            </div>\n            <br/>\n            <label htmlFor='user_cpu'>User CPU</label><br/>\n            <input\n            type='text'\n            id='user_cpu'\n            name='user_cpu'\n            placeholder='Enter your CPU here'\n            value={user_cpu}\n            onChange={onChange}\n            onFocus={() => setCpuFocused(true)}\n            onBlur={onCpuBlurDelay}\n            autoComplete=\"off\"\n            />\n            {isLoadingCPU ? (\n            <div className=\"loading\">\n                <img src={loadingAnimation} alt=\"Loading...\" />\n            </div>\n            ) : null }\n            <div>\n            {cpuFocused && cpuSuggestions.length > 0 ? (\n                <div className=\"suggestions\">\n                {cpuSuggestions.map((suggestion, index) => (\n                    <div \n                    className=\"suggestion-item\"\n                    key={index} \n                    onClick={() => {\n                        console.log(\"Clicked on:\", suggestion.Model);\n                        onChange({ target: { name: 'user_cpu', value: suggestion.Model } });                    \n                    }}\n                    >\n                    {suggestion.Model}\n                    </div>\n                ))}\n                </div>\n            ) : null}\n            </div>\n            <br/>\n            <label htmlFor='user_gpu'>User GPU</label><br/>\n            <input\n                type='text'\n                id='user_gpu'\n                name='user_gpu'\n                placeholder='Enter your GPU here'\n                value={user_gpu}\n                onChange= {onChange}\n                onFocus={() => setGpuFocused(true)}\n                onBlur={onGpuBlurDelay}\n                autoComplete=\"off\"\n            />\n            {isLoadingGPU ? (\n            <div className=\"loading\">\n                <img src={loadingAnimation} alt=\"Loading...\" />\n            </div>\n            ) : null }\n            <div>\n            {gpuFocused && gpuSuggestions.length > 0 ? (\n                <div className=\"suggestions\">\n                {gpuSuggestions.map((suggestion, index) => (\n                    <div \n                    className=\"suggestion-item\"\n                    key={index} \n                    onClick={() => {\n                        onChange({ target: { name: 'user_gpu', value: suggestion.Model } });\n                    }}\n                    >\n                    {suggestion.Model}\n                    </div>\n                ))}\n                </div>\n            ) : null}\n            </div>\n            <br/>\n            <label htmlFor='user_ram'>User RAM</label><br/>\n            <input\n                type='text'\n                id='user_ram'\n                name='user_ram'\n                placeholder='Enter your RAM here'\n                value={user_ram}\n                onChange= {onChange}\n                autoComplete=\"off\"\n            />\n            <br/>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n            <div>\n                {isGameValid ? \"Game input is valid\" : \"Game input is not valid\"}\n            </div>\n            <div>\n                {isCpuValid ? \"CPU input is valid\" : \"CPU input is not valid\"}\n            </div>\n            <div>\n                {isGpuValid ? \"GPU input is valid\" : \"GPU input is not valid\"}\n            </div>\n        </div>\n  );\n}\n\nexport default FrontPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}