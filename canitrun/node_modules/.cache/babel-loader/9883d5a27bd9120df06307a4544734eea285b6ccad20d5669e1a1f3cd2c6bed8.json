{"ast":null,"code":"// import * as server_side_functions from \"\"\nconst User = {\n  CPU: \"\",\n  GPU: \"\",\n  RAM: \"\",\n  OS: 4\n};\nconst Game = {\n  min_CPU: \"\",\n  min_GPU: \"\",\n  min_RAM: \"\",\n  rec_CPU: \"\",\n  rec_GPU: \"\",\n  rec_RAM: \"\",\n  name: \"\",\n  id: \"\",\n  OS: \"\"\n};\nconst OS_id = {\n  // PC means Windows\n  PC: 4,\n  macOS: 5,\n  Linux: 6\n};\nfunction update_os_id_from_RAWG() {\n  // get os id from database os id table\n  // implement this later of project\n}\nfunction get_os_id(os) {\n  switch (os) {\n    case \"macOS\":\n      return OS_id.macOS;\n    case \"Windows\":\n      return OS_id.PC;\n    case \"Linux\":\n      return OS_id.Linux;\n  }\n  return -1;\n}\nfunction json_filter(target, data) {\n  // find target keyword from json tree and set first child's data\n  switch (target) {\n    case 'options':\n    // let listOfData = [1,3];\n\n    //return listOfData;\n    case 'id':\n      Game.id = data.id;\n      return;\n    case 'game':\n      const pcPlatform = data.platforms.find(platform => platform.platform.name === 'PC');\n      const minimumRequirements = pcPlatform ? pcPlatform.requirements.minimum : 'Not available';\n      const recomandedRequirements = pcPlatform ? pcPlatform.requirements.recommended : 'Not available';\n      Game.name = data.name;\n      //array\n      Game.OS = data.name;\n      analyze_requirements(minimumRequirements);\n      analyze_requirements(recomandedRequirements);\n      return;\n  }\n}\nfunction analyze_requirements(MorR, requirements) {\n  let regex = '';\n  let match = '';\n  switch (MorR) {\n    case 'min':\n      regex = /Processor:\\s*([^\\/\\s]+)/;\n      match = requirements.match(regex);\n      Game.min_CPU = match ? match[1] : 'Not found';\n      regex = /Graphics:\\s*([^\\/\\s]+)/;\n      match = requirements.match(regex);\n      Game.min_GPU = match ? match[1] : 'Not found';\n      regex = /Memory:\\s*([^\\/\\s]+)/;\n      match = requirements.match(regex);\n      Game.min_RAM = match ? match[1] : 'Not found';\n      return;\n    case 'rec':\n      regex = /Processor:\\s*([^\\/\\s]+)/;\n      match = requirements.match(regex);\n      Game.rec_CPU = match ? match[1] : 'Not found';\n      regex = /Graphics:\\s*([^\\/\\s]+)/;\n      match = requirements.match(regex);\n      Game.rec_GPU = match ? match[1] : 'Not found';\n      regex = /Memory:\\s*([^\\/\\s]+)/;\n      match = requirements.match(regex);\n      Game.rec_RAM = match ? match[1] : 'Not found';\n      return;\n  }\n}\nfunction combine_url(api_url, params) {\n  let result = api_url + '?';\n  for (let i in params) {\n    result += i + '=' + result[i] + '&';\n  }\n  result.substring(0, result.length - 1);\n  return result;\n}\nexport function user_info(cpu, gpu, ram, os) {\n  User.CPU = cpu;\n  User.GPU = gpu;\n  User.RAM = ram;\n  os = get_os_id(os);\n  if (os >= 0) {\n    User.OS = os;\n  } else {\n    User.OS = 4;\n    show_error(\"Wrong OS name\");\n  }\n}\nfunction show_error(error) {\n  //show the error to user\n  window.alert(error);\n}\nfunction send_request(request) {\n  let result;\n  let error;\n  fetch(request).then(response => response.json()).then(data => {\n    result = data;\n  }).catch(err => {\n    error = err;\n  });\n  return {\n    result,\n    error\n  };\n}\nexport async function get_game_by_name(name) {\n  // http request here\n  let api_url = \"https://api.rawg.io/api/games\";\n  let params = {\n    'key': 'f51c080731c746f09f0a18e6f78f5360',\n    'page_size': 3,\n    'search': name,\n    'ordering': '-metacritic',\n    'platform': User.OS\n  };\n  let data = send_request(combine_url(api_url, params));\n  console.log(data);\n  return data[0];\n  if (Object.keys(data[0]).length === 0) {\n    show_options(json_filter(\"options\", data[0]));\n  } else {\n    show_error(data[1]);\n  }\n  return;\n}\nfunction select_game(game) {\n  json_filter('id', game);\n}\nexport function get_game_info() {\n  let api_url = \"https://api.rawg.io/api/games\";\n  let params = {\n    'key': 'f51c080731c746f09f0a18e6f78f5360',\n    'id': Game.id\n  };\n  let data = send_request(combine_url(api_url, params));\n  if (Object.keys(data[0]).length === 0) {\n    json_filter(\"game\", data[0]);\n  } else {\n    show_error(data[1]);\n  }\n}","map":{"version":3,"names":["User","CPU","GPU","RAM","OS","Game","min_CPU","min_GPU","min_RAM","rec_CPU","rec_GPU","rec_RAM","name","id","OS_id","PC","macOS","Linux","update_os_id_from_RAWG","get_os_id","os","json_filter","target","data","pcPlatform","platforms","find","platform","minimumRequirements","requirements","minimum","recomandedRequirements","recommended","analyze_requirements","MorR","regex","match","combine_url","api_url","params","result","i","substring","length","user_info","cpu","gpu","ram","show_error","error","window","alert","send_request","request","fetch","then","response","json","catch","err","get_game_by_name","console","log","Object","keys","show_options","select_game","game","get_game_info"],"sources":["/Users/nam-yongho/Desktop/Projects/Web Developing Projects/Can It Run/can_it_run/canitrun/src/features.mjs"],"sourcesContent":["// import * as server_side_functions from \"\"\nconst User = {\n    CPU: \"\",\n    GPU: \"\",\n    RAM: \"\",\n    OS: 4\n}\n\nconst Game = {\n    min_CPU: \"\",\n    min_GPU: \"\",\n    min_RAM: \"\",\n\n    rec_CPU: \"\",\n    rec_GPU: \"\",\n    rec_RAM: \"\",\n\n    name: \"\",\n    id: \"\",\n    OS: \"\"\n}\n\nconst OS_id = {\n    // PC means Windows\n    PC: 4,\n    macOS: 5,\n    Linux: 6\n}\n\nfunction update_os_id_from_RAWG(){\n    // get os id from database os id table\n    // implement this later of project\n}\n\nfunction get_os_id(os){\n    switch (os){\n        case \"macOS\":\n            return OS_id.macOS;\n        case \"Windows\":\n            return OS_id.PC;\n        case \"Linux\":\n            return OS_id.Linux;\n    }\n    return -1;\n}\n\nfunction json_filter(target, data){\n    // find target keyword from json tree and set first child's data\n    switch (target) {\n        case 'options':\n            // let listOfData = [1,3];\n\n            //return listOfData;\n        case 'id':\n            Game.id = data.id;\n            return;\n        case 'game':\n            const pcPlatform = data.platforms.find(platform => platform.platform.name === 'PC');\n            const minimumRequirements = pcPlatform ? pcPlatform.requirements.minimum : 'Not available';\n            const recomandedRequirements = pcPlatform ? pcPlatform.requirements.recommended : 'Not available';\n            Game.name = data.name;\n            //array\n            Game.OS = data.name;\n            analyze_requirements(minimumRequirements);\n            analyze_requirements(recomandedRequirements);\n            return;\n    }\n}\n\nfunction analyze_requirements(MorR, requirements){\n    let regex = '';\n    let match = '';\n    switch (MorR){\n        case 'min':\n            regex = /Processor:\\s*([^\\/\\s]+)/;\n            match = requirements.match(regex);\n            Game.min_CPU = match ? match[1] : 'Not found';\n\n            regex = /Graphics:\\s*([^\\/\\s]+)/;\n            match = requirements.match(regex);\n            Game.min_GPU = match ? match[1] : 'Not found';\n\n            regex = /Memory:\\s*([^\\/\\s]+)/;\n            match = requirements.match(regex);\n            Game.min_RAM = match ? match[1] : 'Not found';\n            return;\n        case 'rec':\n            regex = /Processor:\\s*([^\\/\\s]+)/;\n            match = requirements.match(regex);\n            Game.rec_CPU = match ? match[1] : 'Not found';\n\n            regex = /Graphics:\\s*([^\\/\\s]+)/;\n            match = requirements.match(regex);\n            Game.rec_GPU = match ? match[1] : 'Not found';\n\n            regex = /Memory:\\s*([^\\/\\s]+)/;\n            match = requirements.match(regex);\n            Game.rec_RAM = match ? match[1] : 'Not found';\n            return;\n    }\n}\n\n\nfunction combine_url(api_url, params){\n    let result = api_url + '?';\n    for(let i in params){\n        result += i + '=' + result[i] + '&';\n    }\n    result.substring(0, result.length - 1)\n    return result;\n}\n\nexport function user_info(cpu, gpu, ram, os){\n    User.CPU = cpu;\n    User.GPU = gpu;\n    User.RAM = ram;\n    os = get_os_id(os);\n    if(os >= 0){\n        User.OS = os;\n    }else{\n        User.OS = 4;\n        show_error(\"Wrong OS name\")\n    }\n}\n\nfunction show_error(error){\n    //show the error to user\n    window.alert(error)\n}\n\nfunction send_request(request){\n    let result;\n    let error;\n\n    fetch(request)\n        .then(response => response.json())\n        .then(data => {\n            result = data;\n        })\n        .catch(err => {\n            error = err;\n        });\n\n    return {result, error};\n}\n\n\n\nexport async function get_game_by_name(name){\n    // http request here\n    let api_url = \"https://api.rawg.io/api/games\";\n    let params = {\n        'key': 'f51c080731c746f09f0a18e6f78f5360',\n        'page_size': 3,\n        'search': name,\n        'ordering': '-metacritic',\n        'platform': User.OS\n    };\n    let data = send_request(combine_url(api_url, params));\n    console.log(data);\n    return data[0]\n    if(Object.keys(data[0]).length === 0){\n        show_options(json_filter(\"options\", data[0]))\n    }else{\n        show_error(data[1]);\n    }\n    return \n}\n\nfunction select_game(game){\n    json_filter('id', game)\n}\n\nexport function get_game_info(){\n    let api_url = \"https://api.rawg.io/api/games\";\n    let params = {\n        'key': 'f51c080731c746f09f0a18e6f78f5360',\n        'id': Game.id\n    };\n    let data = send_request(combine_url(api_url, params));\n    if(Object.keys(data[0]).length === 0){\n        json_filter(\"game\", data[0]);\n    }else{\n        show_error(data[1]);\n    }}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}