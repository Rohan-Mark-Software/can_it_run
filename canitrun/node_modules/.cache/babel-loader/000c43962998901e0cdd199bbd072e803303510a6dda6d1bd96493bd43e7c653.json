{"ast":null,"code":"var _jsxFileName = \"/Users/nam-yongho/Desktop/Projects/Web Developing Projects/Can It Run/can_it_run/canitrun/src/front_page.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport loadingAnimation from './loading.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FrontPage({\n  user_cpu,\n  user_gpu,\n  user_ram,\n  game_name,\n  game_id,\n  onChange,\n  setGameId\n}) {\n  _s();\n  const history = useHistory();\n  const [isGameValid, setIsGameValid] = useState(false);\n  const [isCpuValid, setIsCpuValid] = useState(false);\n  const [isGpuValid, setIsGpuValid] = useState(false);\n  const [isLoadingGame, setIsLoadingGame] = useState(false);\n  const [finishedTyping, setFinishedTyping] = useState(false);\n  const [gameSuggestions, setGameSuggestions] = useState([]);\n  const [cpuSuggestions, setCpuSuggestions] = useState([]);\n  const [gpuSuggestions, setGpuSuggestions] = useState([]);\n  const [gameFocused, setGameFocused] = useState(false);\n  const [cpuFocused, setCpuFocused] = useState(false);\n  const [gpuFocused, setGpuFocused] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!game_id) {\n      alert(\"Game ID is not set. Cannot proceed.\");\n    } else if (!isCpuValid || !user_cpu) {\n      alert(\"CPU is not set. Cannot proceed.\");\n    } else if (!isGpuValid || !user_gpu) {\n      alert(\"GPU ID is not set. Cannot proceed.\");\n    } else if (!isGameValid || !game_name) {\n      alert(\"Game Name is not set. Cannot proceed.\");\n    } else if (!user_ram) {\n      alert(\"RAM is not set. Cannot proceed.\");\n    } else {\n      history.push(\"/result\");\n    }\n  };\n  const fetchSuggestions = async (input, type) => {\n    try {\n      const response = await fetch(`http://localhost:3001/api/suggestions?input=${input}&type=${type}`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        console.log(response);\n        if (type === 'CPU') {\n          setCpuSuggestions(data);\n        } else if (type === 'GPU') {\n          setGpuSuggestions(data);\n        } else if (type === 'Game') {\n          setGameSuggestions(data);\n        }\n      } else {\n        console.error('inside if Failed to fetch suggestions:', response.status);\n      }\n    } catch (error) {\n      console.error('Failed to fetch suggestions:', error);\n    } finally {\n      if (type === 'Game') {\n        setIsLoadingGame(false); // Set loading state to false when done\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!finishedTyping) {\n      if (game_name) {\n        setGameSuggestions([]);\n        setIsLoadingGame(true); // Set loading state to true for game_name\n        const timer = setTimeout(() => {\n          fetchSuggestions(game_name.toUpperCase(), 'Game');\n        }, 1000);\n        return () => {\n          clearTimeout(timer);\n        };\n      } else {\n        setGameSuggestions([]);\n      }\n    } else {\n      setFinishedTyping(false);\n    }\n  }, [game_name]);\n  useEffect(() => {\n    if (user_cpu) fetchSuggestions(user_cpu, 'CPU');\n  }, [user_cpu]);\n  useEffect(() => {\n    if (user_gpu) fetchSuggestions(user_gpu, 'GPU');\n  }, [user_gpu]);\n  const onGameBlurDelay = () => {\n    setTimeout(() => {\n      setGameFocused(false);\n    }, 200); // 200 milliseconds delay\n  };\n\n  const onCpuBlurDelay = () => {\n    setTimeout(() => {\n      setCpuFocused(false);\n    }, 200); // 200 milliseconds delay\n  };\n\n  const onGpuBlurDelay = () => {\n    setTimeout(() => {\n      setGpuFocused(false);\n    }, 200); // 200 milliseconds delay\n  };\n\n  // Function to check if input matches any of the suggestions\n  const checkInputValidity = (input, suggestions, type) => {\n    const matchingSuggestion = suggestions.find(suggestion => suggestion.Model.toLowerCase() === input.toLowerCase());\n    const isValid = Boolean(matchingSuggestion);\n    if (isValid && type === \"Game\") {\n      setGameId(matchingSuggestion.id); // Set the game_id here\n    }\n\n    if (type === \"CPU\") {\n      setIsCpuValid(isValid);\n    } else if (type === \"GPU\") {\n      setIsGpuValid(isValid);\n    } else if (type === \"Game\") {\n      setIsGameValid(isValid);\n    }\n  };\n  useEffect(() => {\n    if (game_name && gameSuggestions.length > 0) {\n      checkInputValidity(game_name, gameSuggestions, \"Game\");\n    }\n  }, [game_name, gameSuggestions]);\n  useEffect(() => {\n    if (user_cpu && cpuSuggestions.length > 0) {\n      checkInputValidity(user_cpu, cpuSuggestions, \"CPU\");\n    }\n  }, [user_cpu, cpuSuggestions]);\n  useEffect(() => {\n    if (user_gpu && gpuSuggestions.length > 0) {\n      checkInputValidity(user_gpu, gpuSuggestions, \"GPU\");\n    }\n  }, [user_gpu, gpuSuggestions]);\n  let id = \"inputs\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"game_name\",\n        children: \"Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"game_name\",\n        name: \"game_name\",\n        placeholder: \"Enter Name of the Game here\",\n        value: game_name,\n        onChange: onChange,\n        onFocus: () => setGameFocused(true),\n        onBlur: onGameBlurDelay,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this), isLoadingGame ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingAnimation,\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: gameFocused && gameSuggestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions\",\n          children: gameSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            onClick: () => {\n              setFinishedTyping(true);\n              onChange({\n                target: {\n                  name: 'game_name',\n                  value: suggestion.Model\n                }\n              });\n            },\n            children: suggestion.Model\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user_cpu\",\n        children: \"User CPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_cpu\",\n        name: \"user_cpu\",\n        placeholder: \"Enter your CPU here\",\n        value: user_cpu,\n        onChange: onChange,\n        onFocus: () => setCpuFocused(true),\n        onBlur: onCpuBlurDelay,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: cpuFocused && cpuSuggestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions\",\n          children: cpuSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            onClick: () => {\n              console.log(\"Clicked on:\", suggestion.Model);\n              onChange({\n                target: {\n                  name: 'user_cpu',\n                  value: suggestion.Model\n                }\n              });\n            },\n            children: suggestion.Model\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user_gpu\",\n        children: \"User GPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_gpu\",\n        name: \"user_gpu\",\n        placeholder: \"Enter your GPU here\",\n        value: user_gpu,\n        onChange: onChange,\n        onFocus: () => setGpuFocused(true),\n        onBlur: onGpuBlurDelay,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: gpuFocused && gpuSuggestions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestions\",\n          children: gpuSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            onClick: () => {\n              onChange({\n                target: {\n                  name: 'user_gpu',\n                  value: suggestion.Model\n                }\n              });\n            },\n            children: suggestion.Model\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user_ram\",\n        children: \"User RAM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 55\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user_ram\",\n        name: \"user_ram\",\n        placeholder: \"Enter your RAM here\",\n        value: user_ram,\n        onChange: onChange,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isGameValid ? \"Game input is valid\" : \"Game input is not valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isCpuValid ? \"CPU input is valid\" : \"CPU input is not valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isGpuValid ? \"GPU input is valid\" : \"GPU input is not valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n_s(FrontPage, \"hZ8EsMQeAHnlfRRh2pT8vxWHQKg=\", false, function () {\n  return [useHistory];\n});\n_c = FrontPage;\nexport default FrontPage;\nvar _c;\n$RefreshReg$(_c, \"FrontPage\");","map":{"version":3,"names":["React","useEffect","useState","useHistory","loadingAnimation","jsxDEV","_jsxDEV","FrontPage","user_cpu","user_gpu","user_ram","game_name","game_id","onChange","setGameId","_s","history","isGameValid","setIsGameValid","isCpuValid","setIsCpuValid","isGpuValid","setIsGpuValid","isLoadingGame","setIsLoadingGame","finishedTyping","setFinishedTyping","gameSuggestions","setGameSuggestions","cpuSuggestions","setCpuSuggestions","gpuSuggestions","setGpuSuggestions","gameFocused","setGameFocused","cpuFocused","setCpuFocused","gpuFocused","setGpuFocused","handleSubmit","e","preventDefault","alert","push","fetchSuggestions","input","type","response","fetch","ok","data","json","console","log","error","status","timer","setTimeout","toUpperCase","clearTimeout","onGameBlurDelay","onCpuBlurDelay","onGpuBlurDelay","checkInputValidity","suggestions","matchingSuggestion","find","suggestion","Model","toLowerCase","isValid","Boolean","id","length","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","name","placeholder","value","onFocus","onBlur","autoComplete","className","src","alt","map","index","onClick","target","_c","$RefreshReg$"],"sources":["/Users/nam-yongho/Desktop/Projects/Web Developing Projects/Can It Run/can_it_run/canitrun/src/front_page.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport loadingAnimation from './loading.svg';\nfunction FrontPage({user_cpu, user_gpu, user_ram, game_name, game_id, onChange, setGameId}) {\n\n    const history = useHistory();\n\n    const [isGameValid, setIsGameValid] = useState(false);\n    const [isCpuValid, setIsCpuValid] = useState(false);\n    const [isGpuValid, setIsGpuValid] = useState(false);\n\n    const [isLoadingGame, setIsLoadingGame] = useState(false);\n    const [finishedTyping, setFinishedTyping] = useState(false);\n\n    const [gameSuggestions, setGameSuggestions] = useState([]);\n    const [cpuSuggestions, setCpuSuggestions] = useState([]);\n    const [gpuSuggestions, setGpuSuggestions] = useState([]);\n\n    const [gameFocused, setGameFocused] = useState(false);\n    const [cpuFocused, setCpuFocused] = useState(false);\n    const [gpuFocused, setGpuFocused] = useState(false);\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      if (!game_id){\n        alert(\"Game ID is not set. Cannot proceed.\");\n      }else if(!isCpuValid || !user_cpu){\n        alert(\"CPU is not set. Cannot proceed.\");\n      }else if(!isGpuValid || !user_gpu){\n        alert(\"GPU ID is not set. Cannot proceed.\");\n      }else if(!isGameValid || !game_name){\n        alert(\"Game Name is not set. Cannot proceed.\");\n      }else if(!user_ram){\n        alert(\"RAM is not set. Cannot proceed.\");\n      }\n      else{\n        history.push(\"/result\");\n      }\n\n    };\n\n    const fetchSuggestions = async (input, type) => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/suggestions?input=${input}&type=${type}`);\n        if (response.ok) {\n            const data = await response.json();\n            console.log(data);\n            console.log(response);\n            if (type === 'CPU') {\n            setCpuSuggestions(data);\n            } else if (type === 'GPU') {\n            setGpuSuggestions(data);\n            } else if (type === 'Game') {\n            setGameSuggestions(data);\n            }\n        } else {\n            console.error('inside if Failed to fetch suggestions:', response.status);\n        }\n      } catch (error) {\n      console.error('Failed to fetch suggestions:', error);\n      } finally {\n        if (type === 'Game'){\n          setIsLoadingGame(false);  // Set loading state to false when done\n        }\n      }\n    };\n\n    useEffect(() => {\n      if (!finishedTyping){\n        if (game_name) {\n          setGameSuggestions([])\n          setIsLoadingGame(true);  // Set loading state to true for game_name\n          const timer = setTimeout(() => {\n            fetchSuggestions(game_name.toUpperCase(), 'Game');\n          }, 1000); \n          return () => {\n            clearTimeout(timer);\n          };\n        }else{\n          setGameSuggestions([])\n        }\n      }else{\n        setFinishedTyping(false);\n      }\n\n    }, [game_name]);\n\n    useEffect(() => {\n        if (user_cpu) fetchSuggestions(user_cpu, 'CPU');\n    }, [user_cpu]);\n\n    useEffect(() => {\n        if (user_gpu) fetchSuggestions(user_gpu, 'GPU');\n    }, [user_gpu]);\n\n    const onGameBlurDelay = () => {\n        setTimeout(() => {\n          setGameFocused(false);\n        }, 200); // 200 milliseconds delay\n      };\n\n    const onCpuBlurDelay = () => {\n        setTimeout(() => {\n          setCpuFocused(false);\n        }, 200); // 200 milliseconds delay\n      };\n     \n    const onGpuBlurDelay = () => {\n        setTimeout(() => {\n            setGpuFocused(false);\n        }, 200); // 200 milliseconds delay\n    };\n\n  \n    // Function to check if input matches any of the suggestions\n    const checkInputValidity = (input, suggestions, type) => {\n      const matchingSuggestion = suggestions.find(\n          (suggestion) => suggestion.Model.toLowerCase() === input.toLowerCase()\n      );\n      const isValid = Boolean(matchingSuggestion);\n      if (isValid && type === \"Game\") {\n        setGameId(matchingSuggestion.id); // Set the game_id here\n      }\n      if (type === \"CPU\") {\n          setIsCpuValid(isValid);\n      } else if (type === \"GPU\") {\n          setIsGpuValid(isValid);\n      } else if (type === \"Game\") {\n          setIsGameValid(isValid);\n      }\n  };\n  \n    useEffect(() => {\n        if (game_name && gameSuggestions.length > 0) {\n          checkInputValidity(game_name, gameSuggestions, \"Game\");\n        }\n      }, [game_name, gameSuggestions]);\n\n    useEffect(() => {\n      if (user_cpu && cpuSuggestions.length > 0) {\n        checkInputValidity(user_cpu, cpuSuggestions, \"CPU\");\n      }\n    }, [user_cpu, cpuSuggestions]);\n  \n    useEffect(() => {\n      if (user_gpu && gpuSuggestions.length > 0) {\n        checkInputValidity(user_gpu, gpuSuggestions, \"GPU\");\n      }\n    }, [user_gpu, gpuSuggestions]);\n\n  let id = \"inputs\";\n  return (\n        <div id={id}>\n            <form onSubmit={handleSubmit}>\n            <label htmlFor='game_name'>Game</label><br/>\n            <input\n                type='text'\n                id='game_name'\n                name='game_name'\n                placeholder='Enter Name of the Game here'\n                value={game_name}\n                onChange= {onChange}\n                onFocus={() => setGameFocused(true)}\n                onBlur={onGameBlurDelay}\n                autoComplete=\"off\"\n            />\n            {isLoadingGame ? (\n            <div className=\"loading\">\n                <img src={loadingAnimation} alt=\"Loading...\" />\n            </div>\n            ) : null }\n            <div>\n            {gameFocused && gameSuggestions.length > 0 ? (\n                <div className=\"suggestions\">\n                {gameSuggestions.map((suggestion, index) => (\n                    <div \n                    className=\"suggestion-item\"\n                    key={index} \n                    onClick={() => {\n                        setFinishedTyping(true);\n                        onChange({ target: { name: 'game_name', value: suggestion.Model } });           \n                    }}\n                    >\n                    {suggestion.Model}\n                    </div>\n                ))}\n                </div>\n            ) : null}\n            </div>\n            <br/>\n            <label htmlFor='user_cpu'>User CPU</label><br/>\n            <input\n            type='text'\n            id='user_cpu'\n            name='user_cpu'\n            placeholder='Enter your CPU here'\n            value={user_cpu}\n            onChange={onChange}\n            onFocus={() => setCpuFocused(true)}\n            onBlur={onCpuBlurDelay}\n            autoComplete=\"off\"\n            />\n            <div>\n            {cpuFocused && cpuSuggestions.length > 0 ? (\n                <div className=\"suggestions\">\n                {cpuSuggestions.map((suggestion, index) => (\n                    <div \n                    className=\"suggestion-item\"\n                    key={index} \n                    onClick={() => {\n                        console.log(\"Clicked on:\", suggestion.Model);\n                        onChange({ target: { name: 'user_cpu', value: suggestion.Model } });                    \n                    }}\n                    >\n                    {suggestion.Model}\n                    </div>\n                ))}\n                </div>\n            ) : null}\n            </div>\n            <br/>\n            <label htmlFor='user_gpu'>User GPU</label><br/>\n            <input\n                type='text'\n                id='user_gpu'\n                name='user_gpu'\n                placeholder='Enter your GPU here'\n                value={user_gpu}\n                onChange= {onChange}\n                onFocus={() => setGpuFocused(true)}\n                onBlur={onGpuBlurDelay}\n                autoComplete=\"off\"\n            />\n            <div>\n            {gpuFocused && gpuSuggestions.length > 0 ? (\n                <div className=\"suggestions\">\n                {gpuSuggestions.map((suggestion, index) => (\n                    <div \n                    className=\"suggestion-item\"\n                    key={index} \n                    onClick={() => {\n                        onChange({ target: { name: 'user_gpu', value: suggestion.Model } });\n                    }}\n                    >\n                    {suggestion.Model}\n                    </div>\n                ))}\n                </div>\n            ) : null}\n            </div>\n            <br/>\n            <label htmlFor='user_ram'>User RAM</label><br/>\n            <input\n                type='text'\n                id='user_ram'\n                name='user_ram'\n                placeholder='Enter your RAM here'\n                value={user_ram}\n                onChange= {onChange}\n                autoComplete=\"off\"\n            />\n            <br/>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n            <div>\n                {isGameValid ? \"Game input is valid\" : \"Game input is not valid\"}\n            </div>\n            <div>\n                {isCpuValid ? \"CPU input is valid\" : \"CPU input is not valid\"}\n            </div>\n            <div>\n                {isGpuValid ? \"GPU input is valid\" : \"GPU input is not valid\"}\n            </div>\n        </div>\n  );\n}\n\nexport default FrontPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}